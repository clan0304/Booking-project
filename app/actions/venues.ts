'use server';

import { requireAdmin } from '@/lib/auth';
import { supabaseAdmin } from '@/lib/supabase/server';
import { revalidatePath } from 'next/cache';

/**
 * Get all venues with optional filtering
 */
export async function getVenues(filter?: 'all' | 'listed' | 'unlisted') {
  try {
    await requireAdmin();

    let query = supabaseAdmin
      .from('venues')
      .select('*')
      .order('created_at', { ascending: false });

    if (filter === 'listed') {
      query = query.eq('is_listed', true);
    } else if (filter === 'unlisted') {
      query = query.eq('is_listed', false);
    }

    const { data: venues, error } = await query;

    if (error) {
      console.error('Error fetching venues:', error);
      return { success: false, error: 'Failed to fetch venues' };
    }

    return { success: true, data: venues };
  } catch (error) {
    console.error('Error fetching venues:', error);
    return { success: false, error: 'An unexpected error occurred' };
  }
}

/**
 * Create a new venue
 */
export async function createVenue(formData: FormData) {
  try {
    const { supabaseUserId } = await requireAdmin();

    // Get form data
    const name = (formData.get('name') as string)?.trim();
    const address = (formData.get('address') as string)?.trim();
    const phoneNumber = (formData.get('phoneNumber') as string)?.trim();
    const isListed = formData.get('isListed') === 'true';
    const photoFile = formData.get('photo') as File | null;

    // Validate required fields
    if (!name) {
      return { success: false, error: 'Venue name is required' };
    }

    if (!address) {
      return { success: false, error: 'Address is required' };
    }

    let photoUrl: string | null = null;

    // Upload photo if provided
    if (photoFile && photoFile.size > 0) {
      console.log('üì∏ Photo file detected:', {
        name: photoFile.name,
        size: photoFile.size,
        type: photoFile.type,
      });

      // Validate file
      if (photoFile.size > 5 * 1024 * 1024) {
        return { success: false, error: 'Photo must be less than 5MB' };
      }

      if (!photoFile.type.startsWith('image/')) {
        return { success: false, error: 'File must be an image' };
      }

      // Convert File to Buffer for Supabase upload
      const arrayBuffer = await photoFile.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);

      // Generate unique filename
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random()
        .toString(36)
        .substring(7)}.${fileExt}`;
      const filePath = `venues/${fileName}`;

      // Upload to Supabase Storage
      const { error: uploadError } = await supabaseAdmin.storage
        .from('venue-photos')
        .upload(filePath, buffer, {
          contentType: photoFile.type,
          cacheControl: '3600',
          upsert: false,
        });

      if (uploadError) {
        console.error('‚ùå Error uploading photo:', uploadError);
        return {
          success: false,
          error: `Failed to upload photo: ${uploadError.message}`,
        };
      }

      // Get public URL
      const { data: urlData } = supabaseAdmin.storage
        .from('venue-photos')
        .getPublicUrl(filePath);

      photoUrl = urlData.publicUrl;
    } else {
      console.log('‚ÑπÔ∏è No photo file provided or file size is 0');
    }

    // Create venue (slug will be auto-generated by database trigger)
    const { data: venue, error: insertError } = await supabaseAdmin
      .from('venues')
      .insert({
        name,
        address,
        phone_number: phoneNumber || null,
        photo_url: photoUrl,
        is_listed: isListed,
        created_by: supabaseUserId,
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating venue:', insertError);
      return { success: false, error: 'Failed to create venue' };
    }

    revalidatePath('/admin/marketplace');

    return {
      success: true,
      message: 'Venue created successfully!',
      data: venue,
    };
  } catch (error) {
    console.error('Error creating venue:', error);
    return { success: false, error: 'An unexpected error occurred' };
  }
}

/**
 * Update an existing venue
 */
export async function updateVenue(venueId: string, formData: FormData) {
  try {
    await requireAdmin();

    // Get form data
    const name = (formData.get('name') as string)?.trim();
    const address = (formData.get('address') as string)?.trim();
    const phoneNumber = (formData.get('phoneNumber') as string)?.trim();
    const isListed = formData.get('isListed') === 'true';
    const photoFile = formData.get('photo') as File | null;

    // Validate required fields
    if (!name) {
      return { success: false, error: 'Venue name is required' };
    }

    if (!address) {
      return { success: false, error: 'Address is required' };
    }

    // Get existing venue
    const { data: existingVenue, error: fetchError } = await supabaseAdmin
      .from('venues')
      .select('*')
      .eq('id', venueId)
      .single();

    if (fetchError || !existingVenue) {
      return { success: false, error: 'Venue not found' };
    }

    let photoUrl = existingVenue.photo_url;

    // Upload new photo if provided
    if (photoFile && photoFile.size > 0) {
      console.log('üì∏ New photo file detected for update:', {
        name: photoFile.name,
        size: photoFile.size,
        type: photoFile.type,
      });

      // Validate file
      if (photoFile.size > 5 * 1024 * 1024) {
        return { success: false, error: 'Photo must be less than 5MB' };
      }

      if (!photoFile.type.startsWith('image/')) {
        return { success: false, error: 'File must be an image' };
      }

      // Delete old photo if exists
      if (existingVenue.photo_url) {
        const oldPath = existingVenue.photo_url.split(
          '/storage/v1/object/public/venue-photos/'
        )[1];
        if (oldPath) {
          console.log('üóëÔ∏è Deleting old photo:', oldPath);
          await supabaseAdmin.storage.from('venue-photos').remove([oldPath]);
        }
      }

      // Convert File to Buffer
      const arrayBuffer = await photoFile.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);

      // Generate unique filename
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random()
        .toString(36)
        .substring(7)}.${fileExt}`;
      const filePath = `venues/${fileName}`;

      // Upload to Supabase Storage
      const { error: uploadError } = await supabaseAdmin.storage
        .from('venue-photos')
        .upload(filePath, buffer, {
          contentType: photoFile.type,
          cacheControl: '3600',
          upsert: false,
        });

      if (uploadError) {
        console.error('‚ùå Error uploading photo:', uploadError);
        return {
          success: false,
          error: `Failed to upload photo: ${uploadError.message}`,
        };
      }

      // Get public URL
      const { data: urlData } = supabaseAdmin.storage
        .from('venue-photos')
        .getPublicUrl(filePath);

      photoUrl = urlData.publicUrl;
    }

    // Update venue
    const { data: venue, error: updateError } = await supabaseAdmin
      .from('venues')
      .update({
        name,
        address,
        phone_number: phoneNumber || null,
        photo_url: photoUrl,
        is_listed: isListed,
      })
      .eq('id', venueId)
      .select()
      .single();

    if (updateError) {
      console.error('Error updating venue:', updateError);
      return { success: false, error: 'Failed to update venue' };
    }

    revalidatePath('/admin/marketplace');

    return {
      success: true,
      message: 'Venue updated successfully!',
      data: venue,
    };
  } catch (error) {
    console.error('Error updating venue:', error);
    return { success: false, error: 'An unexpected error occurred' };
  }
}

/**
 * Delete a venue
 */
export async function deleteVenue(venueId: string) {
  try {
    await requireAdmin();

    // Get venue to delete photo
    const { data: venue, error: fetchError } = await supabaseAdmin
      .from('venues')
      .select('photo_url')
      .eq('id', venueId)
      .single();

    if (fetchError || !venue) {
      return { success: false, error: 'Venue not found' };
    }

    // Delete photo if exists
    if (venue.photo_url) {
      const photoPath = venue.photo_url.split(
        '/storage/v1/object/public/venue-photos/'
      )[1];
      if (photoPath) {
        console.log('üóëÔ∏è Deleting venue photo:', photoPath);
        await supabaseAdmin.storage.from('venue-photos').remove([photoPath]);
      }
    }

    // Delete venue
    const { error: deleteError } = await supabaseAdmin
      .from('venues')
      .delete()
      .eq('id', venueId);

    if (deleteError) {
      console.error('Error deleting venue:', deleteError);
      return { success: false, error: 'Failed to delete venue' };
    }

    console.log('‚úÖ Venue deleted successfully');
    revalidatePath('/admin/marketplace');

    return {
      success: true,
      message: 'Venue deleted successfully!',
    };
  } catch (error) {
    console.error('Error deleting venue:', error);
    return { success: false, error: 'An unexpected error occurred' };
  }
}

/**
 * Toggle venue listing status
 */
export async function toggleVenueListing(venueId: string, isListed: boolean) {
  try {
    await requireAdmin();

    const { error } = await supabaseAdmin
      .from('venues')
      .update({ is_listed: isListed })
      .eq('id', venueId);

    if (error) {
      console.error('Error toggling venue listing:', error);
      return { success: false, error: 'Failed to update venue status' };
    }

    revalidatePath('/admin/marketplace');

    return {
      success: true,
      message: `Venue ${isListed ? 'listed' : 'unlisted'} successfully!`,
    };
  } catch (error) {
    console.error('Error toggling venue listing:', error);
    return { success: false, error: 'An unexpected error occurred' };
  }
}
